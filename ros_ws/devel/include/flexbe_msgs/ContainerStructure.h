// Generated by gencpp from file flexbe_msgs/ContainerStructure.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_CONTAINERSTRUCTURE_H
#define FLEXBE_MSGS_MESSAGE_CONTAINERSTRUCTURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flexbe_msgs/Container.h>

namespace flexbe_msgs
{
template <class ContainerAllocator>
struct ContainerStructure_
{
  typedef ContainerStructure_<ContainerAllocator> Type;

  ContainerStructure_()
    : behavior_id(0)
    , containers()  {
    }
  ContainerStructure_(const ContainerAllocator& _alloc)
    : behavior_id(0)
    , containers(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _behavior_id_type;
  _behavior_id_type behavior_id;

   typedef std::vector< ::flexbe_msgs::Container_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::flexbe_msgs::Container_<ContainerAllocator> >::other >  _containers_type;
  _containers_type containers;




  typedef boost::shared_ptr< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> const> ConstPtr;

}; // struct ContainerStructure_

typedef ::flexbe_msgs::ContainerStructure_<std::allocator<void> > ContainerStructure;

typedef boost::shared_ptr< ::flexbe_msgs::ContainerStructure > ContainerStructurePtr;
typedef boost::shared_ptr< ::flexbe_msgs::ContainerStructure const> ContainerStructureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::ContainerStructure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'flexbe_msgs': ['/home/ai05/ros_ws/src/birl_baxter_executive/flexbe_behavior_engine/flexbe_msgs/msg', '/home/ai05/ros_ws/devel/share/flexbe_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9cd26d15621063b90279d87117694328";
  }

  static const char* value(const ::flexbe_msgs::ContainerStructure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9cd26d15621063b9ULL;
  static const uint64_t static_value2 = 0x0279d87117694328ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/ContainerStructure";
  }

  static const char* value(const ::flexbe_msgs::ContainerStructure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 behavior_id\n\
Container[] containers\n\
================================================================================\n\
MSG: flexbe_msgs/Container\n\
string path\n\
string[] children\n\
string[] outcomes\n\
string[] transitions\n\
byte[] autonomy\n\
";
  }

  static const char* value(const ::flexbe_msgs::ContainerStructure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior_id);
      stream.next(m.containers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContainerStructure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::ContainerStructure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::ContainerStructure_<ContainerAllocator>& v)
  {
    s << indent << "behavior_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior_id);
    s << indent << "containers[]" << std::endl;
    for (size_t i = 0; i < v.containers.size(); ++i)
    {
      s << indent << "  containers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::flexbe_msgs::Container_<ContainerAllocator> >::stream(s, indent + "    ", v.containers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_CONTAINERSTRUCTURE_H
