// Generated by gencpp from file force_controller/setPoint.msg
// DO NOT EDIT!


#ifndef FORCE_CONTROLLER_MESSAGE_SETPOINT_H
#define FORCE_CONTROLLER_MESSAGE_SETPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace force_controller
{
template <class ContainerAllocator>
struct setPoint_
{
  typedef setPoint_<ContainerAllocator> Type;

  setPoint_()
    : num_ctrls(0)
    , domType()
    , domDes()
    , domGains()
    , subType()
    , subDes()
    , subGains()  {
    }
  setPoint_(const ContainerAllocator& _alloc)
    : num_ctrls(0)
    , domType(_alloc)
    , domDes(_alloc)
    , domGains(_alloc)
    , subType(_alloc)
    , subDes(_alloc)
    , subGains(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_ctrls_type;
  _num_ctrls_type num_ctrls;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _domType_type;
  _domType_type domType;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _domDes_type;
  _domDes_type domDes;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _domGains_type;
  _domGains_type domGains;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _subType_type;
  _subType_type subType;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _subDes_type;
  _subDes_type subDes;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _subGains_type;
  _subGains_type subGains;




  typedef boost::shared_ptr< ::force_controller::setPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::force_controller::setPoint_<ContainerAllocator> const> ConstPtr;

}; // struct setPoint_

typedef ::force_controller::setPoint_<std::allocator<void> > setPoint;

typedef boost::shared_ptr< ::force_controller::setPoint > setPointPtr;
typedef boost::shared_ptr< ::force_controller::setPoint const> setPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::force_controller::setPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::force_controller::setPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace force_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'force_controller': ['/home/ai05/ros_ws/src/birl_baxter_controllers/force_controller/msg'], 'baxter_core_msgs': ['/home/ai05/ros_ws/src/baxter_common/baxter_core_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::force_controller::setPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::force_controller::setPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::force_controller::setPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::force_controller::setPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::force_controller::setPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::force_controller::setPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::force_controller::setPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cda3fb843d195f1bf40697fef6470230";
  }

  static const char* value(const ::force_controller::setPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcda3fb843d195f1bULL;
  static const uint64_t static_value2 = 0xf40697fef6470230ULL;
};

template<class ContainerAllocator>
struct DataType< ::force_controller::setPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "force_controller/setPoint";
  }

  static const char* value(const ::force_controller::setPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::force_controller::setPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Number of Controllers\n\
int32 num_ctrls\n\
\n\
# Type of dominant controller\n\
string domType\n\
\n\
# Desired force/moment (3D) for dominant controller\n\
geometry_msgs/Vector3[] domDes\n\
\n\
# Gains force/moment (3D) for dominant controller\n\
geometry_msgs/Vector3[] domGains\n\
\n\
# Type of subordinate controller\n\
string subType\n\
\n\
# Desired force/moment (3D) for subordinate controller\n\
geometry_msgs/Vector3[] subDes\n\
\n\
# Gains force/moment (3D) for subordinate controller\n\
geometry_msgs/Vector3[] subGains\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::force_controller::setPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::force_controller::setPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_ctrls);
      stream.next(m.domType);
      stream.next(m.domDes);
      stream.next(m.domGains);
      stream.next(m.subType);
      stream.next(m.subDes);
      stream.next(m.subGains);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::force_controller::setPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::force_controller::setPoint_<ContainerAllocator>& v)
  {
    s << indent << "num_ctrls: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_ctrls);
    s << indent << "domType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.domType);
    s << indent << "domDes[]" << std::endl;
    for (size_t i = 0; i < v.domDes.size(); ++i)
    {
      s << indent << "  domDes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.domDes[i]);
    }
    s << indent << "domGains[]" << std::endl;
    for (size_t i = 0; i < v.domGains.size(); ++i)
    {
      s << indent << "  domGains[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.domGains[i]);
    }
    s << indent << "subType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.subType);
    s << indent << "subDes[]" << std::endl;
    for (size_t i = 0; i < v.subDes.size(); ++i)
    {
      s << indent << "  subDes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.subDes[i]);
    }
    s << indent << "subGains[]" << std::endl;
    for (size_t i = 0; i < v.subGains.size(); ++i)
    {
      s << indent << "  subGains[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.subGains[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FORCE_CONTROLLER_MESSAGE_SETPOINT_H
